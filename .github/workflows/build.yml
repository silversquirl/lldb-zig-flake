name: Build
on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_URL: s3://nix-squirl-dev?region=us-east-005&endpoint=s3.us-east-005.backblazeb2.com

  TMP_CACHE_OPTS: ?compression-level=0&parallel-compression=true
  TOOLS_CACHE: /tmp/nix-bincache-llvm-tools
  LLVM_CACHE: /tmp/nix-bincache-llvm
  CLANG_CACHE: /tmp/nix-bincache-libclang
  LLDB_CACHE: /tmp/nix-bincache-lldb

jobs:
  build-tools:
    name: Build LLVM build tools
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v31

      - uses: actions/cache@v4
        id: tools-cache
        with:
          path: ${{env.TOOLS_CACHE}}
          key: ${{runner.os}}-llvm-tools-${{github.run_id}}-${{github.run_attempt}}
          restore-keys: ${{runner.os}}-llvm-tools-

      - name: Load self cache
        if: steps.tools-cache.outputs.cache-hit != ''
        run: |
          nix copy --all --no-check-sigs --from "file://$TOOLS_CACHE$TMP_CACHE_OPTS"
          rm -r "$TOOLS_CACHE"

      - name: Build package
        run: nix copy --print-build-logs .#llvmPackages_lldb-zig.tools.tblgen --to "file://$TOOLS_CACHE$TMP_CACHE_OPTS"

  build-llvm:
    name: Build LLVM
    runs-on: ubuntu-latest
    needs: build-tools
    steps:
      - uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 16384
          swap-size-mb: 4096
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          # nix runs builds in /tmp/nix-build-*
          build-mount-path: /tmp

      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v31

      - uses: actions/cache/restore@v4
        with:
          path: ${{env.TOOLS_CACHE}}
          key: ${{runner.os}}-llvm-tools-${{github.run_id}}-${{github.run_attempt}}

      - uses: actions/cache@v4
        id: llvm-cache
        with:
          path: ${{env.LLVM_CACHE}}
          key: ${{runner.os}}-llvm-${{github.run_id}}-${{github.run_attempt}}
          restore-keys: |
            ${{runner.os}}-libclang-
            ${{runner.os}}-llvm-

      - name: Load previous cache
        run: nix copy --all --no-check-sigs --from "file://$TOOLS_CACHE$TMP_CACHE_OPTS"

      - name: Load self cache
        if: steps.llvm-cache.outputs.cache-hit != ''
        run: |
          nix copy --all --no-check-sigs --from "file://$LLVM_CACHE$TMP_CACHE_OPTS"
          rm -r "$LLVM_CACHE"

      - name: Build package
        run: nix copy --print-build-logs .#llvmPackages_lldb-zig.{llvm,tools.tblgen} --to "file://$LLVM_CACHE$TMP_CACHE_OPTS"

  build-libclang:
    name: Build libclang
    runs-on: ubuntu-latest
    needs: build-llvm
    steps:
      - uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 16384
          swap-size-mb: 4096
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          # nix runs builds in /tmp/nix-build-*
          build-mount-path: /tmp

      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v31

      - uses: actions/cache/restore@v4
        with:
          path: ${{env.LLVM_CACHE}}
          key: ${{runner.os}}-llvm-${{github.run_id}}-${{github.run_attempt}}

      - uses: actions/cache@v4
        id: clang-cache
        with:
          path: ${{env.CLANG_CACHE}}
          key: ${{runner.os}}-libclang-${{github.run_id}}-${{github.run_attempt}}
          restore-keys: ${{runner.os}}-libclang-

      - name: Load previous cache
        run: nix copy --all --no-check-sigs --from "file://$LLVM_CACHE$TMP_CACHE_OPTS"

      - name: Load self cache
        if: steps.clang-cache.outputs.cache-hit != ''
        run: |
          nix copy --all --no-check-sigs --from "file://$CLANG_CACHE$TMP_CACHE_OPTS"
          rm -r "$CLANG_CACHE"

      - name: Build package
        run: nix copy --print-build-logs .#llvmPackages_lldb-zig.lib{llvm,clang} --to "file://$CLANG_CACHE$TMP_CACHE_OPTS"

  build-full:
    name: Build lldb
    runs-on: ubuntu-latest
    needs: build-libclang
    steps:
      - uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 16384
          swap-size-mb: 4096
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          # nix runs builds in /tmp/nix-build-*
          build-mount-path: /tmp

      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v31

      - uses: actions/cache/restore@v4
        with:
          path: ${{env.CLANG_CACHE}}
          key: ${{runner.os}}-libclang-${{github.run_id}}-${{github.run_attempt}}

      - uses: actions/cache@v4
        id: lldb-cache
        with:
          path: ${{env.LLDB_CACHE}}
          key: ${{runner.os}}-lldb-${{github.run_id}}-${{github.run_attempt}}
          restore-keys: ${{runner.os}}-lldb-

      - name: Load previous cache
        run: nix copy --all --no-check-sigs --from "file://$CLANG_CACHE$TMP_CACHE_OPTS"

      - name: Load self cache
        if: steps.lldb-cache.outputs.cache-hit != ''
        run: |
          nix copy --all --no-check-sigs --from "file://$LLDB_CACHE$TMP_CACHE_OPTS"
          rm -r "$LLDB_CACHE"

      - name: Build package
        run: nix copy --print-build-logs .#llvmPackages_lldb-zig.lldb --to "file://$LLDB_CACHE$TMP_CACHE_OPTS"

  final:
    name: Build lldb-zig and upload to binary cache
    runs-on: ubuntu-latest
    needs: build-full
    steps:
      - uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 16384
          swap-size-mb: 4096
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          # nix runs builds in /tmp/nix-build-*
          build-mount-path: /tmp

      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v31

      - uses: actions/cache/restore@v4
        with:
          path: ${{env.LLVM_CACHE}}
          key: ${{runner.os}}-llvm-${{github.run_id}}-${{github.run_attempt}}

      - uses: actions/cache/restore@v4
        with:
          path: ${{env.CLANG_CACHE}}
          key: ${{runner.os}}-libclang-${{github.run_id}}-${{github.run_attempt}}

      - uses: actions/cache/restore@v4
        with:
          path: ${{env.LLDB_CACHE}}
          key: ${{runner.os}}-lldb-${{github.run_id}}-${{github.run_attempt}}

      - name: Load previous cache
        run: nix copy --all --no-check-sigs --from "file://$LLDB_CACHE$TMP_CACHE_OPTS"

      - name: Build package
        run: nix build --print-build-logs .#lldb-zig

      - name: Sign packages
        run: |
          echo "$NIX_SIGNING_KEY" >signing-key
          nix store sign --verbose --key-file signing-key .#lldb-zig .#llvmPackages_lldb-zig.lldb
          rm signing-key
        env:
          NIX_SIGNING_KEY: ${{ secrets.NIX_SIGNING_KEY }}

      - name: Upload to binary cache
        run: nix copy --verbose --to "$CACHE_URL" .#lldb-zig .#llvmPackages_lldb-zig.lldb
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.B2_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.B2_SECRET_KEY }}

